<<<<<<< Updated upstream
#zapisujemy konfiguracje bazy danych, ktora utworzylismy
#student_tracker i podlaczamy sie do niej
spring.datasource.url=jdbc:mysql://localhost:3306/student_tracker
#kolejny properties to dodanie uzytkownika i hasla, ktory
=======
#zapisujemy konfiguracje bazy danych, która utworzylismy
#student_tracker i pod?aczamy si? do niej
spring.datasource.url=jdbc:mysql://localhost:3306/student_tracker
#kolejny properties to dodanie uzytkownika i has?a, który
>>>>>>> Stashed changes
#ma nadany dostep do bazy
spring.datasource.username=springstudent
spring.datasource.password=springstudent

#Usuwamy konsolowy baner Spring Boota
spring.main.banner-mode=off

<<<<<<< Updated upstream
#Usuwamy dla porzadku rownie? inne logi niz informacyjne(bledy beda sie
#nadal pojawiac) i bedziemy mogli zobaczyc tylko nasz print.
=======
#Usuwamy dla porzadku rownie? inne logi niz informacyjne(b?edy bed? si?
#nadal pojawia?) i bedziemy mogli zobaczyc tylko nasz print.
>>>>>>> Stashed changes
logging.level.root=warn

#Dodajemy sobie logging konfiguracje wysswietlajaca SQL zapytania
#w kosoli podczas uruchamiania programu
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=trace

<<<<<<< Updated upstream
#Cala baze danych mozemy stworzyc automatycznie dzieki JPA/Hibernate
#wystarczy dodac w aplication.properties zapis - nalezy pamietac ze
#nieodracalnie zmienia to scheme bazy danych, wiec nie jest to polecane
#spring.jpa.hibernate.ddl-auto=create
=======
#Ca?a baze danych mozemy stworzyc automatycznie dzieki JPA/Hibernate
#wystarczy dodac w aplication.properties zapis - nale?y pamietac ze
#nieodracalnie zmienia to scheme bazy danych, wiec nie jest to polecane
#spring.jpa.hibernate.ddl-auto=create

>>>>>>> Stashed changes
